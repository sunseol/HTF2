from pathlib import Path
path = Path('src/services/ai-enhancement-service.ts')
text = path.read_text()
old = """    const lines = input.rootSnapshot\n      ? summarizeSnapshotNodes(input.rootSnapshot)\n      : summarizeFigmaNodes(input.nodes);\n\n    const chunks = buildChunks(lines, MAX_CHARS_PER_CHUNK, MAX_VISION_CHUNKS);\n\n    if (chunks.length > 0) {\n      try {\n        const screenshotBase64 = input.screenshotPath\n          ? (await fs.readFile(input.screenshotPath)).toString('base64')\n          : undefined;\n\n        const vision = await callGeminiForChunks(chunks, screenshotBase64, { timeoutMs });\n        if (vision) {\n          return vision;\n        }\n      } catch (error) {\n        if (error instanceof TimeoutError) {\n          logger.warn('Vision model timed out globally', { timeoutMs });\n        } else {\n          logger.warn('Vision model failed, using heuristic fallback', { error });\n        }\n      }\n    } else if (!input.rootSnapshot) {\n      logger.info('Vision skipped due to empty chunk set (no snapshot)');\n    }\n"""
new = """    const lines = input.rootSnapshot\n      ? summarizeSnapshotNodes(input.rootSnapshot)\n      : summarizeFigmaNodes(input.nodes);\n\n    const chunks = buildChunks(lines, MAX_CHARS_PER_CHUNK, MAX_VISION_CHUNKS);\n\n    logger.info('Gemini vision chunk plan', {\n      chunkCount: chunks.length,\n      maxChars: MAX_CHARS_PER_CHUNK,\n      maxChunks: MAX_VISION_CHUNKS,\n      inputNodes: input.nodes.length,\n      hasSnapshot: Boolean(input.rootSnapshot),\n    });\n\n    if (chunks.length > 0) {\n      try {\n        const screenshotBase64 = input.screenshotPath\n          ? (await fs.readFile(input.screenshotPath)).toString('base64')\n          : undefined;\n\n        const vision = await callGeminiForChunks(chunks, screenshotBase64, timeoutMs);\n        if (vision) {\n          return vision;\n        }\n      } catch (error) {\n        if (error instanceof TimeoutError) {\n          logger.warn('Vision model timed out globally', { timeoutMs });\n        } else {\n          logger.warn('Vision model failed, using heuristic fallback', { error });\n        }\n      }\n    } else {\n      logger.warn('Gemini vision chunking produced no chunks; using heuristics', { hasSnapshot: Boolean(input.rootSnapshot), inputNodes: input.nodes.length });\n    }\n"""
if old not in text:
    raise SystemExit('chunk block pattern not found')
path.write_text(text.replace(old, new))
